create type "public"."User Type" as enum ('CUSTOMER', 'PROFESSIONAL');

create table "public"."Professionals" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "bio" text default ''::text,
    "category" text not null,
    "specialities" text[] not null,
    "languages" text[] not null,
    "hourly_rate" numeric not null,
    "rating" real not null default '0'::real,
    "rating_count" numeric not null default '0'::numeric,
    "professional_id" uuid not null default auth.uid()
);


alter table "public"."Professionals" enable row level security;

alter table "public"."Users" add column "type" "User Type" not null default 'CUSTOMER'::"User Type";

alter table "public"."Users" alter column "phone" set data type text using "phone"::text;

alter table "public"."Users" alter column "user_id" set default auth.uid();

alter table "public"."Users" alter column "user_id" set data type uuid using "user_id"::uuid;

CREATE UNIQUE INDEX "Professionals_pkey" ON public."Professionals" USING btree (id);

CREATE UNIQUE INDEX "Professionals_professional_id_key" ON public."Professionals" USING btree (professional_id);

alter table "public"."Professionals" add constraint "Professionals_pkey" PRIMARY KEY using index "Professionals_pkey";

alter table "public"."Professionals" add constraint "Professionals_professional_id_fkey" FOREIGN KEY (professional_id) REFERENCES "Users"(user_id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."Professionals" validate constraint "Professionals_professional_id_fkey";

alter table "public"."Professionals" add constraint "Professionals_professional_id_key" UNIQUE using index "Professionals_professional_id_key";

alter table "public"."Users" add constraint "Users_phone_check" CHECK ((length(phone) = 10)) not valid;

alter table "public"."Users" validate constraint "Users_phone_check";

grant delete on table "public"."Professionals" to "anon";

grant insert on table "public"."Professionals" to "anon";

grant references on table "public"."Professionals" to "anon";

grant select on table "public"."Professionals" to "anon";

grant trigger on table "public"."Professionals" to "anon";

grant truncate on table "public"."Professionals" to "anon";

grant update on table "public"."Professionals" to "anon";

grant delete on table "public"."Professionals" to "authenticated";

grant insert on table "public"."Professionals" to "authenticated";

grant references on table "public"."Professionals" to "authenticated";

grant select on table "public"."Professionals" to "authenticated";

grant trigger on table "public"."Professionals" to "authenticated";

grant truncate on table "public"."Professionals" to "authenticated";

grant update on table "public"."Professionals" to "authenticated";

grant delete on table "public"."Professionals" to "service_role";

grant insert on table "public"."Professionals" to "service_role";

grant references on table "public"."Professionals" to "service_role";

grant select on table "public"."Professionals" to "service_role";

grant trigger on table "public"."Professionals" to "service_role";

grant truncate on table "public"."Professionals" to "service_role";

grant update on table "public"."Professionals" to "service_role";

create policy "Allow anyone to read the data"
on "public"."Professionals"
as permissive
for select
to public
using (true);


create policy "Allow only authenticated users to insert data"
on "public"."Professionals"
as permissive
for insert
to authenticated
with check (true);


create policy "Allow only professionals to delete their profile"
on "public"."Professionals"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = professional_id));


create policy "Allow professionals to update their own profile"
on "public"."Professionals"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = professional_id))
with check ((( SELECT auth.uid() AS uid) = professional_id));


create policy "Allow only users to delete their data"
on "public"."Users"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Allow only users to update their data"
on "public"."Users"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."Users"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



