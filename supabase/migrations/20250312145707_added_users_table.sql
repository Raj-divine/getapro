create table "public"."Users" (
    "id" bigint generated by default as identity not null,
    "user_id" character varying not null,
    "created_at" timestamp with time zone not null default now(),
    "first_name" text not null,
    "last_name" text,
    "email" text not null,
    "phone" character varying,
    "profile_picture" text,
    "updated_at" timestamp without time zone not null default now()
);


alter table "public"."Users" enable row level security;

CREATE UNIQUE INDEX "Users_email_key" ON public."Users" USING btree (email);

CREATE UNIQUE INDEX "Users_phone_key" ON public."Users" USING btree (phone);

CREATE UNIQUE INDEX "Users_pkey" ON public."Users" USING btree (id);

CREATE UNIQUE INDEX "Users_profile_picture_key" ON public."Users" USING btree (profile_picture);

CREATE UNIQUE INDEX "Users_user_id_key" ON public."Users" USING btree (user_id);

alter table "public"."Users" add constraint "Users_pkey" PRIMARY KEY using index "Users_pkey";

alter table "public"."Users" add constraint "Users_email_key" UNIQUE using index "Users_email_key";

alter table "public"."Users" add constraint "Users_phone_key" UNIQUE using index "Users_phone_key";

alter table "public"."Users" add constraint "Users_profile_picture_key" UNIQUE using index "Users_profile_picture_key";

alter table "public"."Users" add constraint "Users_user_id_key" UNIQUE using index "Users_user_id_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.update_updated_at_column()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  -- Only update `updated_at` if the column exists in the table
  IF EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = TG_TABLE_NAME 
    AND column_name = 'updated_at'
  ) THEN
    NEW.updated_at = NOW();
  END IF;
  RETURN NEW;
END;
$function$
;

grant delete on table "public"."Users" to "anon";

grant insert on table "public"."Users" to "anon";

grant references on table "public"."Users" to "anon";

grant select on table "public"."Users" to "anon";

grant trigger on table "public"."Users" to "anon";

grant truncate on table "public"."Users" to "anon";

grant update on table "public"."Users" to "anon";

grant delete on table "public"."Users" to "authenticated";

grant insert on table "public"."Users" to "authenticated";

grant references on table "public"."Users" to "authenticated";

grant select on table "public"."Users" to "authenticated";

grant trigger on table "public"."Users" to "authenticated";

grant truncate on table "public"."Users" to "authenticated";

grant update on table "public"."Users" to "authenticated";

grant delete on table "public"."Users" to "service_role";

grant insert on table "public"."Users" to "service_role";

grant references on table "public"."Users" to "service_role";

grant select on table "public"."Users" to "service_role";

grant trigger on table "public"."Users" to "service_role";

grant truncate on table "public"."Users" to "service_role";

grant update on table "public"."Users" to "service_role";

CREATE TRIGGER trigger_update_updated_at BEFORE UPDATE ON public."Users" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();


