create type "public"."Session status" as enum ('CREATED', 'PAID', 'INPROGRESS', 'REFUNDED', 'COMPLETED', 'PAYMENT_FAILED', 'RERFUND_INITIATED');

create table "public"."sessions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone default now(),
    "customer_id" uuid not null default gen_random_uuid(),
    "professional_id" uuid not null default gen_random_uuid(),
    "start_time" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "duration" numeric not null default '0'::numeric,
    "status" "Session status" not null default 'CREATED'::"Session status",
    "rate_per_hour" numeric not null default '0'::numeric,
    "amount" numeric not null default '0'::numeric,
    "session_id" uuid not null default gen_random_uuid()
);


alter table "public"."sessions" enable row level security;

CREATE UNIQUE INDEX sessions_pkey ON public.sessions USING btree (id);

CREATE UNIQUE INDEX sessions_session_id_key ON public.sessions USING btree (session_id);

alter table "public"."sessions" add constraint "sessions_pkey" PRIMARY KEY using index "sessions_pkey";

alter table "public"."sessions" add constraint "sessions_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES users(user_id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."sessions" validate constraint "sessions_customer_id_fkey";

alter table "public"."sessions" add constraint "sessions_professional_id_fkey" FOREIGN KEY (professional_id) REFERENCES professionals(professional_id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."sessions" validate constraint "sessions_professional_id_fkey";

alter table "public"."sessions" add constraint "sessions_session_id_key" UNIQUE using index "sessions_session_id_key";

grant delete on table "public"."sessions" to "anon";

grant insert on table "public"."sessions" to "anon";

grant references on table "public"."sessions" to "anon";

grant select on table "public"."sessions" to "anon";

grant trigger on table "public"."sessions" to "anon";

grant truncate on table "public"."sessions" to "anon";

grant update on table "public"."sessions" to "anon";

grant delete on table "public"."sessions" to "authenticated";

grant insert on table "public"."sessions" to "authenticated";

grant references on table "public"."sessions" to "authenticated";

grant select on table "public"."sessions" to "authenticated";

grant trigger on table "public"."sessions" to "authenticated";

grant truncate on table "public"."sessions" to "authenticated";

grant update on table "public"."sessions" to "authenticated";

grant delete on table "public"."sessions" to "service_role";

grant insert on table "public"."sessions" to "service_role";

grant references on table "public"."sessions" to "service_role";

grant select on table "public"."sessions" to "service_role";

grant trigger on table "public"."sessions" to "service_role";

grant truncate on table "public"."sessions" to "service_role";

grant update on table "public"."sessions" to "service_role";

create policy "Allow only customer to delete their session"
on "public"."sessions"
as permissive
for delete
to authenticated
using ((auth.uid() = customer_id));


create policy "Enable creator and professional to view the session"
on "public"."sessions"
as permissive
for select
to authenticated
using (((auth.uid() = customer_id) OR (auth.uid() = professional_id)));


create policy "Enable insert for authenticated users only"
on "public"."sessions"
as permissive
for insert
to authenticated
with check (true);



