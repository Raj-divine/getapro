drop trigger if exists "trigger_update_updated_at" on "public"."Users";

drop policy "Allow anyone to read the data" on "public"."Professionals";

drop policy "Allow only authenticated users to insert data" on "public"."Professionals";

drop policy "Allow only professionals to delete their profile" on "public"."Professionals";

drop policy "Allow professionals to update their own profile" on "public"."Professionals";

drop policy "Allow anyone to create an entry" on "public"."Users";

drop policy "Allow only users to delete their data" on "public"."Users";

drop policy "Allow only users to update their data" on "public"."Users";

drop policy "Enable users to view their own data only" on "public"."Users";

revoke delete on table "public"."Professionals" from "anon";

revoke insert on table "public"."Professionals" from "anon";

revoke references on table "public"."Professionals" from "anon";

revoke select on table "public"."Professionals" from "anon";

revoke trigger on table "public"."Professionals" from "anon";

revoke truncate on table "public"."Professionals" from "anon";

revoke update on table "public"."Professionals" from "anon";

revoke delete on table "public"."Professionals" from "authenticated";

revoke insert on table "public"."Professionals" from "authenticated";

revoke references on table "public"."Professionals" from "authenticated";

revoke select on table "public"."Professionals" from "authenticated";

revoke trigger on table "public"."Professionals" from "authenticated";

revoke truncate on table "public"."Professionals" from "authenticated";

revoke update on table "public"."Professionals" from "authenticated";

revoke delete on table "public"."Professionals" from "service_role";

revoke insert on table "public"."Professionals" from "service_role";

revoke references on table "public"."Professionals" from "service_role";

revoke select on table "public"."Professionals" from "service_role";

revoke trigger on table "public"."Professionals" from "service_role";

revoke truncate on table "public"."Professionals" from "service_role";

revoke update on table "public"."Professionals" from "service_role";

revoke delete on table "public"."Users" from "anon";

revoke insert on table "public"."Users" from "anon";

revoke references on table "public"."Users" from "anon";

revoke select on table "public"."Users" from "anon";

revoke trigger on table "public"."Users" from "anon";

revoke truncate on table "public"."Users" from "anon";

revoke update on table "public"."Users" from "anon";

revoke delete on table "public"."Users" from "authenticated";

revoke insert on table "public"."Users" from "authenticated";

revoke references on table "public"."Users" from "authenticated";

revoke select on table "public"."Users" from "authenticated";

revoke trigger on table "public"."Users" from "authenticated";

revoke truncate on table "public"."Users" from "authenticated";

revoke update on table "public"."Users" from "authenticated";

revoke delete on table "public"."Users" from "service_role";

revoke insert on table "public"."Users" from "service_role";

revoke references on table "public"."Users" from "service_role";

revoke select on table "public"."Users" from "service_role";

revoke trigger on table "public"."Users" from "service_role";

revoke truncate on table "public"."Users" from "service_role";

revoke update on table "public"."Users" from "service_role";

alter table "public"."Professionals" drop constraint "Professionals_professional_id_fkey";

alter table "public"."Professionals" drop constraint "Professionals_professional_id_key";

alter table "public"."Users" drop constraint "Users_email_key";

alter table "public"."Users" drop constraint "Users_phone_check";

alter table "public"."Users" drop constraint "Users_phone_key";

alter table "public"."Users" drop constraint "Users_profile_picture_key";

alter table "public"."Users" drop constraint "Users_user_id_fkey";

alter table "public"."Users" drop constraint "Users_user_id_key";

alter table "public"."Professionals" drop constraint "Professionals_pkey";

alter table "public"."Users" drop constraint "Users_pkey";

drop index if exists "public"."Users_profile_picture_key";

drop index if exists "public"."Professionals_pkey";

drop index if exists "public"."Professionals_professional_id_key";

drop index if exists "public"."Users_email_key";

drop index if exists "public"."Users_phone_key";

drop index if exists "public"."Users_pkey";

drop index if exists "public"."Users_user_id_key";

drop table "public"."Professionals";

drop table "public"."Users";

create table "public"."professionals" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "bio" text default ''::text,
    "category" "Professional Categories" not null,
    "specialities" text[] not null,
    "languages" "Languages"[] not null,
    "hourly_rate" numeric not null,
    "rating" real not null default '0'::real,
    "rating_count" numeric not null default '0'::numeric,
    "professional_id" uuid not null default auth.uid(),
    "is_verified" boolean not null default false,
    "profile_picture" text not null
);


alter table "public"."professionals" enable row level security;

create table "public"."users" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null default auth.uid(),
    "created_at" timestamp with time zone not null default now(),
    "first_name" text not null,
    "last_name" text,
    "email" text not null,
    "phone" text,
    "updated_at" timestamp without time zone not null default now(),
    "type" "User Type" not null default 'CUSTOMER'::"User Type"
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX "Professionals_pkey" ON public.professionals USING btree (id);

CREATE UNIQUE INDEX "Professionals_professional_id_key" ON public.professionals USING btree (professional_id);

CREATE UNIQUE INDEX "Users_email_key" ON public.users USING btree (email);

CREATE UNIQUE INDEX "Users_phone_key" ON public.users USING btree (phone);

CREATE UNIQUE INDEX "Users_pkey" ON public.users USING btree (id);

CREATE UNIQUE INDEX "Users_user_id_key" ON public.users USING btree (user_id);

alter table "public"."professionals" add constraint "Professionals_pkey" PRIMARY KEY using index "Professionals_pkey";

alter table "public"."users" add constraint "Users_pkey" PRIMARY KEY using index "Users_pkey";

alter table "public"."professionals" add constraint "Professionals_professional_id_fkey" FOREIGN KEY (professional_id) REFERENCES users(user_id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."professionals" validate constraint "Professionals_professional_id_fkey";

alter table "public"."professionals" add constraint "Professionals_professional_id_key" UNIQUE using index "Professionals_professional_id_key";

alter table "public"."users" add constraint "Users_email_key" UNIQUE using index "Users_email_key";

alter table "public"."users" add constraint "Users_phone_check" CHECK ((length(phone) = 10)) not valid;

alter table "public"."users" validate constraint "Users_phone_check";

alter table "public"."users" add constraint "Users_phone_key" UNIQUE using index "Users_phone_key";

alter table "public"."users" add constraint "Users_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "Users_user_id_fkey";

alter table "public"."users" add constraint "Users_user_id_key" UNIQUE using index "Users_user_id_key";

create or replace view "public"."public_user_names" as  SELECT users.user_id,
    users.first_name,
    users.last_name
   FROM users;


grant delete on table "public"."professionals" to "anon";

grant insert on table "public"."professionals" to "anon";

grant references on table "public"."professionals" to "anon";

grant select on table "public"."professionals" to "anon";

grant trigger on table "public"."professionals" to "anon";

grant truncate on table "public"."professionals" to "anon";

grant update on table "public"."professionals" to "anon";

grant delete on table "public"."professionals" to "authenticated";

grant insert on table "public"."professionals" to "authenticated";

grant references on table "public"."professionals" to "authenticated";

grant select on table "public"."professionals" to "authenticated";

grant trigger on table "public"."professionals" to "authenticated";

grant truncate on table "public"."professionals" to "authenticated";

grant update on table "public"."professionals" to "authenticated";

grant delete on table "public"."professionals" to "service_role";

grant insert on table "public"."professionals" to "service_role";

grant references on table "public"."professionals" to "service_role";

grant select on table "public"."professionals" to "service_role";

grant trigger on table "public"."professionals" to "service_role";

grant truncate on table "public"."professionals" to "service_role";

grant update on table "public"."professionals" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Allow anyone to read the data"
on "public"."professionals"
as permissive
for select
to public
using (true);


create policy "Allow only authenticated users to insert data"
on "public"."professionals"
as permissive
for insert
to authenticated
with check (true);


create policy "Allow only professionals to delete their profile"
on "public"."professionals"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = professional_id));


create policy "Allow professionals to update their own profile"
on "public"."professionals"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = professional_id))
with check ((( SELECT auth.uid() AS uid) = professional_id));


create policy "Allow anyone to create an entry"
on "public"."users"
as permissive
for insert
to public
with check (true);


create policy "Allow only users to delete their data"
on "public"."users"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Allow only users to update their data"
on "public"."users"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."users"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


CREATE TRIGGER trigger_update_updated_at BEFORE UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();


